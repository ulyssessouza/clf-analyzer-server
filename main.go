package main

import (
	"flag"
	"fmt"
	"os"

	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
	"github.com/swaggo/echo-swagger"

	"bufio"
	"github.com/hpcloud/tail"
	"github.com/ulyssessouza/clf-analyzer-server/core"
	"github.com/ulyssessouza/clf-analyzer-server/data"
	_ "github.com/ulyssessouza/clf-analyzer-server/docs" // docs is generated by Swag CLI
	"github.com/ulyssessouza/clf-analyzer-server/http"
)

var port = flag.Int("port", 8000, "port to listen on")
var tailFlag = flag.String("tail", "stdin", "file to tail")

func closeConnections() {
	// TODO Gracefully close all open connections
	// for all conns c {
	//     c.WriteControl(CloseMessage, FormatCloseMessage(CloseGoingAway, ""), time.Now().Add(1 * time.Second))
	// }
}

func inputFromTail(c *chan string, fileName string) {
	t, err := tail.TailFile(fileName, tail.Config{Follow: true, ReOpen: true})
	if err != nil {
		panic(fmt.Sprintf("Couldn't tail file '%s'", fileName))
	}

	for line := range t.Lines {
		*c <- line.Text
	}
}

func inputFromStdIn(c *chan string) {
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		*c <- scanner.Text()
	}
}

func main() {
	flag.Parse()
	var cacheRefreshChan = make(chan int) // data.ticker -> SQL select -> scoreChannels.Broadcast()

	db := data.OpenDb("sqlite_clf_analyzer.db")
	data.InitDb(db)
	var inputLineChan = make(chan string) // Channel used to make the input source generic
	defer close(inputLineChan)

	if tailFlag != nil && *tailFlag != "" && *tailFlag != "stdin" {
		go inputFromTail(&inputLineChan, *tailFlag)
	} else {
		go inputFromStdIn(&inputLineChan)
	}
	go core.StartIngestion(&inputLineChan)

	go http.StartListenTicks(&cacheRefreshChan)

	go data.StartScoreLoop(&cacheRefreshChan)
	go data.StartAlertLoop(&cacheRefreshChan)
	go data.StartHitsLoop(&cacheRefreshChan)
	go core.UpdateAlert()

	defer data.CloseDb()
	defer close(cacheRefreshChan)

	e := echo.New()
	e.HideBanner = true
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.GET("/", http.RootHandler)

	gV1 := e.Group("/v1")
	gV1.GET("/", http.RootHandler)
	gV1.GET("/swagger/*", echoSwagger.WrapHandler)
	gV1.GET("/score", http.SectionsScoreHandler)
	gV1.GET("/alert", http.AlertsHandler)
	gV1.GET("/hits", http.HitsHandler)

	e.Logger.Fatal(e.Start(fmt.Sprintf(":%d", *port)))
}
