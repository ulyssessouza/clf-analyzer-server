package main

import (
	"os"
	"fmt"
	"flag"

	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
	"github.com/swaggo/echo-swagger"

	_ "github.com/ulyssessouza/clf-analyzer-server/docs" // docs is generated by Swag CLI
	"github.com/ulyssessouza/clf-analyzer-server/core"
	"github.com/ulyssessouza/clf-analyzer-server/http"
	"github.com/ulyssessouza/clf-analyzer-server/data"
)

var port = flag.Int("port", 8000, "port to listen on")

func main() {
	flag.Parse()
	var cacheRefreshChan = make(chan int) // data.ticker -> select -> scoreChannels.Broadcast()
	db := data.OpenDb("sqlite_clf_analyzer.db")
	data.InitDb(db)
	go core.StartIngestion(os.Stdin)
	go http.StartListenTicks(&cacheRefreshChan)
	go data.StartScoreLoop(&cacheRefreshChan)
	go data.StartAlertLoop(&cacheRefreshChan)
	go core.UpdateAlert()

	defer data.CloseDb()
	defer close(cacheRefreshChan)

	e := echo.New()
	e.HideBanner = true

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.GET("/", http.RootHandler)
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	e.GET("/score", http.SectionsScore)
	e.GET("/alert", http.Alerts)

	e.Logger.Fatal(e.Start(fmt.Sprintf(":%d", *port)))
}
